{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","resetButtonRules","alphabetButtonRules","ALPABET","lengthButtonRules","LENGTH","preparedGoods","goods","visibleGoods","sort","first","second","localeCompare","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAmBJ,IAAaL,EAASI,MAAQG,EACjDG,EAAsBL,IAAaL,EAASW,QAC5CC,EAAoBP,IAAaL,EAASa,OAE1CC,EApCD,SACLC,EADK,GAGJ,IADCV,EACF,EADEA,SAAUE,EACZ,EADYA,WAENS,EAAY,YAAOD,GAEzB,OAAQV,GACN,KAAML,EAASW,QACbK,EAAaC,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAME,cAAcD,MACzD,MAGF,KAAMnB,EAASa,OACbG,EAAaC,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAMG,OAASF,EAAOE,UAQ/D,OAAId,EACKS,EAAaM,UAGfN,EAWeO,CACpBtB,EACA,CAAEI,WAAUE,eAId,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,0BAA2BhB,IAE/BiB,QAAS,kBAAMrB,EAAYN,EAASW,UANtC,iCAWA,wBACEc,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,6BAA8Bd,IAElCe,QAAS,kBAAMrB,EAAYN,EAASa,SANtC,4BAWA,wBACEY,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,8BAA+BnB,IAEnCoB,QAAS,kBAAMnB,GAAeD,IANhC,qBAWCE,GACC,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPnB,GAAc,GACdF,EAAYN,EAASI,OALzB,sBAaJ,6BACGU,EAAcc,KAAI,SAAAC,GAAI,OACrB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCxHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9f1ccd97.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case (SortType.ALPABET): {\n      visibleGoods.sort((first, second) => first.localeCompare(second));\n      break;\n    }\n\n    case (SortType.LENGTH): {\n      visibleGoods.sort((first, second) => first.length - second.length);\n      break;\n    }\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const resetButtonRules = sortType !== SortType.NONE || isReversed;\n  const alphabetButtonRules = sortType !== SortType.ALPABET;\n  const lengthButtonRules = sortType !== SortType.LENGTH;\n\n  const preparedGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'button is-info is-light': alphabetButtonRules },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'button is-success is-light': lengthButtonRules },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'button is-warning is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {resetButtonRules && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReversed(false);\n              setSortType(SortType.NONE);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}